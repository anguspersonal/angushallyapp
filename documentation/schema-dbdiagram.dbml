// DBML for dbdiagram.io Visualization
// This file is a simplified version of schema.dbml, tailored for optimal rendering and compatibility with dbdiagram.io.
// It omits some detailed constraint names and uses syntax preferred by dbdiagram.io (e.g., [nullable] is removed, inline [unique] for simple cases).
// The canonical source of truth for the precise schema, including all named constraints and specific index types, is schema.dbml and the Knex migration files.
// Purpose: Primarily for generating visual ERDs.

// --- Simplifications for dbdiagram.io ---
// 1. `[nullable]` attribute: Removed from all columns. dbdiagram.io infers nullability if `[not null]` is absent.
// 2. Inline `[unique]`: Used for simple single-column unique constraints (e.g., `google_sub string [unique]`).
//    The actual named unique constraint (e.g., `uq_users_google_sub`) is defined in the Knex migration and detailed in `schema.dbml`.
// 3. Composite `[unique]` in `Indexes` block: For multi-column unique constraints (e.g., `(email, auth_provider) [unique]`), this is standard DBML.
//    The constraint name (e.g., `uq_users_email_auth_provider`) is omitted here for brevity but exists in the database.
// 4. Index Names: Specific index names (e.g., `ix_users_email`) are removed from the `Indexes{}` blocks for this visual version.
//    The `Indexes` block still declares which columns are indexed for performance.
// 5. Partial Unique Indexes: dbdiagram.io doesn't visually represent the `WHERE` clause of a partial unique index.
//    These are noted in the `Indexes` block (e.g., for `access_requests.user_id WHERE status = 'pending'`) but the `unique` keyword is omitted from the index definition here to avoid implying a full unique index on the column(s) alone.
// 6. `Ref` delete actions: Corrected to use syntax like `[delete: set null]` (without single quotes around `set null`).
// 7. ENUM types: Represented as `string` with a comment, as DBML has limited native ENUM support for direct visualization in some tools.

// --- Project Wide Settings (Optional, but good for context) ---
Project angushally_app {
  database_type: 'PostgreSQL'
  Note: 'Application database for various personal projects and utilities, featuring a unified identity system.'
}

// --- Schema: identity ---
// Manages all user identities, roles, and access control for the entire application.

Table identity.users {
  id uuid [pk, default: `gen_random_uuid()`]
  email string [not null]
  password_hash string
  auth_provider string [not null, default: 'local']
  google_sub string [unique] // Simple unique for diagram
  first_name string
  last_name string
  is_active boolean [not null, default: false]
  email_verified_at timestamptz
  last_login_at timestamptz
  metadata jsonb [not null, default: '{}']
  created_at timestamptz [not null, default: `now()`]
  updated_at timestamptz [not null, default: `now()`]

  Indexes {
    (email)
    (auth_provider)
    (is_active)
    (last_login_at)
    (google_sub)
    (email, auth_provider) [unique] // Composite unique
  }
}

Table identity.roles {
  id uuid [pk, default: `gen_random_uuid()`]
  name string [not null, unique] // Simple unique for diagram
  description string
  created_at timestamptz [not null, default: `now()`]
  updated_at timestamptz [not null, default: `now()`]
}

Table identity.user_roles {
  user_id uuid [not null]
  role_id uuid [not null]
  created_at timestamptz [not null, default: `now()`]
  updated_at timestamptz [not null, default: `now()`]

  Indexes {
    (role_id, user_id) // Index for join performance
  }
  Note: 'Composite primary key on (user_id, role_id)'
}

Table identity.access_requests {
  id uuid [pk, default: `gen_random_uuid()`]
  user_id uuid [not null]
  requested_at timestamptz [not null, default: `now()`]
  status string [not null, default: 'pending'] // ENUM: ['pending', 'approved', 'rejected']
  handled_by uuid
  handled_at timestamptz
  rejection_reason string
  created_at timestamptz [not null, default: `now()`]
  updated_at timestamptz [not null, default: `now()`]

  Indexes {
    (user_id)
    (status)
    (requested_at)
    (handled_at)
    (user_id) [note: 'DB has PARTIAL UNIQUE index for (user_id) WHERE status = \'pending\' named uq_access_requests_pending_user']
  }
}

// Relationships for identity schema
Ref: identity.user_roles.user_id > identity.users.id [delete: cascade]
Ref: identity.user_roles.role_id > identity.roles.id [delete: cascade]
Ref: identity.access_requests.user_id > identity.users.id [delete: set null]
Ref: identity.access_requests.handled_by > identity.users.id [delete: set null]


// Schema: habit
Table habit._deprecated_users { 
  user_id integer [pk] 
  email string
  fname string
  lname string
  google_user_id string 
  created_at timestamptz
  last_updated timestamptz
}

Table habit.habit_log {
  id integer [pk, increment]
  user_id uuid [ref: > identity.users.id, not null] // TARGET STATE
  habit_type string [not null]
  value real 
  metric string 
  extra_data jsonb 
  created_at timestamptz [default: `now()`]
}

Table habit.alcohol { 
  id integer [pk, increment]
  habit_log_id integer [ref: > habit.habit_log.id]
  user_id uuid [ref: > identity.users.id] 
  drink_id integer
  volume_ml real
  abv_percent real
  created_at timestamptz [default: `now()`]
}

Table habit.exercise { 
  id integer [pk, increment]
  habit_log_id integer [ref: > habit.habit_log.id]
  user_id uuid [ref: > identity.users.id] 
  activity_type string
  duration_minutes integer
  distance_km real
  created_at timestamptz [default: `now()`]
}

Table habit.drink_catalog {
  id integer [pk, increment]
  name string [not null]
  volume_ml real
  abv_percent real
  created_at timestamptz [default: `now()`]
}

Table habit.exercises { 
  id integer [pk, increment]
  name string [not null]
  category string
  created_at timestamptz [default: `now()`]
}

// --- Schema: crm ---
Table crm.inquiries {
  id integer [pk, increment]
  name string [not null]
  email string [not null]
  message string
  status string [default: 'new']
  user_id uuid [ref: > identity.users.id] 
  created_at timestamptz [default: `now()`]
  updated_at timestamptz [default: `now()`]
}

// --- Schema: fsa ---
Table fsa.local_authorities {
  local_authority_id integer [pk]
  name string [not null]
  friendly_name string
  url string
  metadata jsonb
  created_at timestamptz [default: `now()`]
  updated_at timestamptz [default: `now()`]
}

Table fsa.establishments {
  fhrs_id integer [pk]
  business_name string
  business_type string
  address_line_1 string
  address_line_2 string
  address_line_4 string
  post_code string
  rating_value string
  rating_date date
  latitude float
  longitude float
  local_authority_id integer [ref: > fsa.local_authorities.local_authority_id]
  metadata jsonb
  created_at timestamptz [default: `now()`]
  updated_at timestamptz [default: `now()`]
}

// --- Schema: public_data ---
Table public_data._deprecated_customers { 
  id integer [pk] 
  name string
  email string
  phone string
  created_at timestamptz
}

Table public_data.authors {
  id integer [pk, increment]
  name string [not null]
  email string [unique] 
  bio string
  created_at timestamptz [default: `now()`]
}

Table public_data.posts {
  id integer [pk, increment]
  title string [not null]
  content string
  author_id integer [ref: > public_data.authors.id] 
  created_at timestamptz [default: `now()`]
  updated_at timestamptz [default: `now()`]
}
