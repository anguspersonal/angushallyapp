---
description: 
globs: 
alwaysApply: true
---
**IMPORTANT** Remember that even in auto run, you don't have passwords, so stop when running terminal commands that require passwords, and as user to run the command, then await response. 

## 🧠 Philosophy

* This is a **monolithic full-stack application** using:

  * React (CRA) frontend in `react-ui/`
  * Node.js/Express backend in `server/`
  * PostgreSQL database (multi-schema)
* The application is modular by domain, not microservices.
* All credentials, tokens, and feature flags are managed via `.env`, parsed using `angushallyapp/config/env.js`.

## 📁 Project Structure

```bash
angushallyapp/
├── server/                  # Backend Express app
│   ├── routes/              # Modular route handlers (1 per domain)
│   ├── habit-api/           # Habit-specific logic
│   ├── fsa-data-sync/       # UK Food Hygiene Ratings
│   ├── strava-api/          # Strava integration
│   ├── angushallyapp/config/env.js        # Centralized environment loader
│   ├── db.js                # Shared PostgreSQL access logic
│   └── index.js             # Main entry point
├── react-ui/                # React frontend app
├── .env*                    # Environment configs
├── docs/           # Architecture, schema, and development docs
```

## 🔐 Authentication

* Use Google OAuth 2.0 + JWT tokens only
* Use `authMiddleware()` to guard protected routes
* Tokens are passed via Bearer headers, and decoded using `auth.js`
* Attach user info to `req.user`

## 📦 Feature Integration Rules

When adding a new feature:

1. Add a file to `server/routes/` with the pattern `[featureName]Route.js`
2. Use `authMiddleware()` if feature needs authentication
3. Load environment vars via `angushallyapp/config/env.js`
4. Add SQL tables to `docs/04_schema.md` under a logical schema
5. Mount route in `server/index.js`
6. Use `db.js` for all DB queries (avoid raw `pg` unless justified)

## 🔁 Naming Conventions

* Files: `kebab-case.js`
* React Components: `PascalCase.jsx`
* Variables/functions: `camelCase`
* SQL columns: `snake_case`

## 🧪 Environment Management

* All variables should be defined in `.env`, `.env.development`, or Heroku config vars
* Load env values via `angushallyapp/config/env.js`, **not** directly from `process.env`
* Use `scripts/sync-env.js` to regenerate frontend `.env.*` files

## 🛑 Terminal Command Limitations

* **Never attempt to run commands requiring password input via Cursor.**
* Instead, output a **ready-to-copy command** for the user to run manually, e.g.:

```bash
# ⛔ BAD: Do not run this directly
sudo service postgresql restart

# ✅ GOOD: Output to user
"To restart PostgreSQL, please run this in your terminal:"
sudo service postgresql restart
```

## 🧱 Database Structure

* Use PostgreSQL schemas:

  * `identity` (users, roles)
  * `habit` (logs, alcohol, exercise)
  * `crm` (contact inquiries)
  * `content` (blog posts, authors)
  * `fsa` (food safety data)
* Add new tables to `docs/04_schema.md`
* Use `db.select(...)` and `db.query(...)` utilities

## Git Commits

- **Clean up debug logs**  
  Before committing, scan for any `console.log` (or `console.debug`/`warn`/`error`) statements used during development.  
  - **Comment them out**, rather than deleting, so they’re easy to restore if needed.  
  - This keeps your committed codebase free of noise and protects any sensitive information.


## 🛠️ API Design Standards

* Prefix all routes with `/api/[domain]`
* Return consistent error objects:

  ```json
  { "error": "Missing required parameter: email" }
  ```
* Avoid hard-coded user IDs. Always use `req.user.id`

## 🧪 Feature Testing

Before integrating new code:

1. Create a standalone test script in `scripts/test/[feature].js`
2. Load env via `require('../../config/env')`
3. Test external APIs and DB access

## 🔍 Dev Scripts

```bash
npm run dev          # Start full stack
npm run server       # Start backend only
npm run client       # Start frontend only
npm run sync-env     # Sync .env for frontend build
```

## 📆 End-of-Day Workflow

When the user says “end for the day,” follow this structured wrap-up process:

### 1. Reflect on Uncommitted Changes
- Check for uncommitted changes using `git status` or equivalent.
- If changes are **non-trivial** and functioning as expected, plan to commit them *after docs updates*.
- If changes are **minor**, **experimental**, or **incomplete**, skip the commit and proceed to docs.

### 2. Update `docs/03_updates.md`
- Write a **dated** summary of the day’s progress (e.g., `-- 2025-05-25`).
- Mention any planned commits.
- Structure the update clearly (e.g., **Bug Fixes**, **Feature Work**, **Refactors**).

### 3. Review `docs/02_roadmap.md`
- Check whether significant progress has been made toward roadmap items.
- If so, update those items to reflect new status.
- Mark completed items with ✅ or move them to a **Completed** section.

### 4. Capture Skipped or Deferred Work
- Identify anything discussed or encountered but not pursued.
- Categorize it:
  - ✅ Optional improvements → `docs/07_backlog.md`
  - ⚠️ Technical debt → `docs/06_tech_debt.md`
- Before adding, scan existing entries:
  - Avoid duplicates.
  - Merge related entries and retain any relevant notes.

### 5. Update Schema docs
- If schema changes were made:
  - Update `docs/04_schema.md` and/or `docs/05_database.md`.
- Do **not delete** historical details unless clearly outdated.
- Prefer annotations like:  
  _“🆕 Column added May 2025 for XYZ purpose.”_

### 6. ✅ Final Sanity Check
- Review the working directory again.
- If everything is complete and working:
  - Commit changes:
    ```bash
    git add docs/
    git commit -m "End-of-day update: [summary of key work]"
    ```
  - Push to remote (Heroku or GitHub) if appropriate.


## 💡 Cursor Hints

* All API endpoints are defined in `server/routes/*`
* Central config is in `angushallyapp/config/env.js`
* JWT/Google auth logic is in `auth.js`
* PostgreSQL access is in `db.js`
* Schema overview lives in `docs/04_schema.md`

---

If you need to make global changes, search for `/routes/`, `authMiddleware`, or `env.js` as entry points.
