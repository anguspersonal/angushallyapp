Here’s the **updated implementation plan** for integrating the **Raindrop.io API**, reflecting that `raindropRoute.js` will live inside your central `server/routes/` directory (alongside other route files like `habitRoute.js`, `stravaRoute.js`, etc.).

---

## ✅ **Raindrop.io Integration – Finalized Implementation Plan**

### **1. Goals**

* Allow authenticated users to import their Raindrop.io bookmarks
* Display bookmarks in your React frontend
* Store bookmarks in PostgreSQL, per user
* Support re-authentication and sync
* Securely manage credentials for dev and prod

---

## **2. Setup & Configuration** - ✅ Done

### 2.1. **Create Two Raindrop.io Applications**

| Environment     | Raindrop App      | Redirect URI                                         |
| --------------- | ----------------- | ---------------------------------------------------- |
| **Production**  | `angushally-prod` | `https://angushally.com/api/raindrop/oauth/callback` |
| **Development** | `angushally-dev`  | `http://localhost:5000/api/raindrop/oauth/callback`  |

---

### 2.2. **Environment Variables**

**`.env.development`**

```env
RAINDROP_CLIENT_ID=your-dev-client-id
RAINDROP_CLIENT_SECRET=your-dev-client-secret
RAINDROP_REDIRECT_URI=http://localhost:5000/api/raindrop/oauth/callback
```

**`.env.production` (Heroku Config Vars)**

```env
RAINDROP_CLIENT_ID=your-prod-client-id
RAINDROP_CLIENT_SECRET=your-prod-client-secret
RAINDROP_REDIRECT_URI=https://angushally.com/api/raindrop/oauth/callback
```

Your `env.js` already supports loading environment-specific variables.

---

## **3. Backend Implementation**

### 3.1. **File Structure** - ✅ Done

```
/server/routes/
├── raindropRoute.js           <-- NEW: Raindrop API endpoints

/server/raindrop-api/
├── raindropAuth.js            <-- OAuth logic (auth URL, token exchange)
├── fetchBookmarks.js          <-- Call Raindrop API
├── saveBookmarks.js           <-- Insert bookmarks into DB
```

---

### 3.2. **Database Tables** - ✅ Done

**`raindrop.tokens`**

```sql
CREATE TABLE raindrop.tokens (
  user_id UUID PRIMARY KEY REFERENCES identity.users(id),
  access_token TEXT NOT NULL,
  refresh_token TEXT,
  expires_at TIMESTAMPTZ
);
```

**`raindrop.bookmarks`**

```sql
CREATE TABLE raindrop.bookmarks (
  id SERIAL PRIMARY KEY,
  user_id UUID REFERENCES identity.users(id),
  raindrop_id INTEGER,
  title TEXT,
  link TEXT,
  tags TEXT[],
  created_at TIMESTAMPTZ DEFAULT now()
);
```

---

### 3.3. **API Routes (`/server/routes/raindropRoute.js`)** ✅ Done

| Endpoint                           | Purpose                           |
| ---------------------------------- | --------------------------------- |
| `GET /api/raindrop/oauth/start`    | Redirects to Raindrop auth screen |
| `GET /api/raindrop/oauth/callback` | Exchanges code for token          |
| `POST /api/raindrop/sync`          | Fetches and stores bookmarks      |
| `GET /api/raindrop/bookmarks`      | Retrieves bookmarks from DB       |

Mount this in `server/index.js`:

```js
const raindropRoute = require('./routes/raindropRoute');
app.use('/api/raindrop', authMiddleware(), raindropRoute);
```

---

### 3.4. **OAuth Logic (`raindropAuth.js`)** -- ✅ Done

Functions:

* `getAuthUrl()` – builds auth URL
* `exchangeCodeForTokens(code)` – handles token exchange with Raindrop.io
* `storeTokens(userId, tokens)` – save in `raindrop.tokens` table

---

### 3.5. **Bookmark Sync Logic** -- ✅ Done

* Use `fetchBookmarks.js` to get bookmarks using the stored access token.
* Use `saveBookmarks.js` to normalize and insert bookmarks into DB.

---

## **4. Frontend Implementation** 

### 4.1. **OAuth Initiation UI** 

* Add a **"Connect Raindrop"** button

  * Calls: `GET /api/raindrop/oauth/start`
  * Backend redirects to Raindrop auth

---

### 4.2. **Bookmark Viewer**

* Calls: `GET /api/raindrop/bookmarks`
* Displays:

  * Title (as link)
  * Tags (as badges)
  * Optional: sorting, filtering, pagination

---

## **5. Sync Model**

| Trigger Type    | Description                  |
| --------------- | ---------------------------- |
| Manual Sync     | Button triggers `POST /sync` |
| Auto Sync (opt) | Use Heroku Scheduler         |
| Refresh Token   | Re-auth on 401 or expiry     |

---

## **6. Security Notes**

* All routes use `authMiddleware()`
* Tokens stored server-side only
* Environment-specific config separation
* Only backend touches Raindrop API

---

## **7. Testing Matrix**

| Test Item        | Goal                                |
| ---------------- | ----------------------------------- |
| Dev OAuth Flow   | Ensure redirect to localhost works  |
| Token Exchange   | Tokens saved in `raindrop.tokens`   |
| Bookmark Fetch   | Data retrieved from Raindrop API    |
| DB Storage       | Bookmarks inserted for correct user |
| Frontend Display | UI renders bookmarks correctly      |
| Error Handling   | Detect expired/invalid tokens       |

---

Let me know if you'd like:

* SQL migration files
* Backend route scaffolding
* A React page or component for the import & viewer

We can start with whatever you’d like next.
